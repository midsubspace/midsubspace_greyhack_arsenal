print "Imported Custom.src"

cus={}
cus.programs={}
cus.local_libs=function(shell=null)//Grabs local libs from a given shell object
    if typeof(shell)==null then shell=cor.req("shell",bat.cur_obj)
    if typeof(shell)!="shell" then cor.exit_err("local_lib: Must have shell object you have>"+typeof(shell))
    if bio.protected.indexOf(shell.host_computer.public_ip)!=null then cor.exit_err("local_lib: You are trying to grab local libs from protected system>"+shell.host_computer.public_ip)
    cus.payloads("create",shell)
    if cus.dropzone==null then cor.exit_err("local_libs: Dropzone is null")
    bat_file=cus.bat_file
    if bio.debug==1 then print bat_file.path+char(10)+typeof(bat_file)
    s=bio.hardware_server.scp("/lib/metaxploit.so",cus.dropzone.path,shell)
    s=bio.hardware_server.scp("/lib/crypto.so",cus.dropzone.path,shell)
    sr=bat_file.set_content("crypto=include_lib("""+cus.dropzone.path+"/crypto.so"")"+char(10)+"meta=include_lib("""+cus.dropzone.path+"/metaxploit.so"")"+char(10)+"get_custom_object[""local_meta""]=meta"+char(10)+"get_custom_object[""local_crypto""]=crypto"+char(10)+"get_custom_object[""local_switch""]=get_switch"+char(10)+"get_custom_object[""local_router""]=get_router"+char(10)+"get_custom_object[""local_rshell""]=include_lib(""/lib/librshell.so"")"+char(10)+"exit")
    if typeof(sr)=="string" then 
        cor.exit_err("local_lib: Error setting content of "+bat_file.path,sr)
    else
        br=shell.build(cus.dropzone.path+"/"+cus.payload_name+".src",cus.dropzone.path)
        if br != "" then
            cor.exit_err("local_libs: There was an error while compiling at "+cus.dropzone.path+": ",br)
         else
            bat_file.set_content(bio.log_msg)
            shell.launch(cus.dropzone.path+"/"+cus.payload_name)
            for item in bat.object_history
                if item["public_ip"]==shell.host_computer.public_ip and item["local_ip"]==shell.host_computer.local_ip and item["user"]==cor.user(shell) then
                    item["local_meta"]=get_custom_object["local_meta"]
                    if typeof(item["local_meta"])!="MetaxploitLib" then;print("Failed Getting Local Meta");else;print "Got Local Meta";end if
                    item["local_crypto"]=get_custom_object["local_crypto"]
                    if typeof(item["local_crypto"])!="cryptoLib" then;print("Failed Getting Local Cypto");else;print "Got Local Cypto";end if
                    item["local_router"]=get_custom_object["local_router"]
                    if typeof(item["local_router"])!="router" then;print("Failed Getting Local Router");else;print "Got Local Router";end if
                    item["local_rshell"]=get_custom_object["local_rshell"]
                end if
            end for
         end if
        end if
        cus.payloads("clean")
end function

cus.payloads=function(mode="create",object=null)//create payloads
    create=function(object)
        if object==null then object=bat.cur_obj
        if typeof(object)!="shell" then return
        if bio.debug==1 then print "Creating Payload"
        temp=cor.find(object.host_computer.File("/"))
        cus.payload_name="dcall"
        cus.dropzone=null
        for folder in temp.folders
            wait 0.1
            if cus.dropzone!=null then continue
            if folder.has_permission("w") then cus.dropzone=folder
        end for
        if cus.dropzone==null then return
        object.host_computer.touch(cus.dropzone.path,cus.payload_name+".src")
        if bio.debug==1 then user_input("Dropzone Path:"+cus.dropzone,0,1)
        wait 0.1
        batch_file=object.host_computer.File(cus.dropzone.path+"/"+cus.payload_name+".src")
        if typeof(batch_file)=="file" then cus.bat_file=batch_file
        if bio.debug==1 then print "Payload Created"
    end function
    clean=function(object)
        if object==null then object=bat.cur_obj
        if typeof(object)!="shell" then return
        oldpath=cus.dropzone.path
        batch_file=object.host_computer.File(oldpath+"/"+cus.payload_name+".src")
        if batch_file and batch_file.is_binary==0 and batch_file.is_folder==0 then batch_file.set_content("")
        temp=cor.find(object.host_computer.File("/"))
        cus.dropzone=null
        for folder in temp.folders
            if folder.has_permission("w") then cus.dropzone=folder
        end for
        if batch_file then
            batch_file.move(cus.dropzone.path,cus.payload_name)
            batch_file.move(oldpath,cus.payload_name)
            if object.host_computer.File("/etc").has_permission("w") then
                temp=cor.find(object.host_computer.File("/"))
                cus.dropzone=null
                for folder in temp.folders
                    if folder.has_permission("w") then cus.dropzone=folder
                end for
                object.host_computer.File(oldpath+"/"+cus.payload_name).move(cus.dropzone.path,"fstab")
                object.host_computer.File(cus.dropzone.path+"/fstab").move("/etc","fstab")
            else
                if object.host_computer.File("/home/guest/Config").has_permission("w") then
                    object.host_computer.File(oldpath+"/"+cus.payload_name).move("/home/guest/Config","Mail.txt")
                    object.host_computer.File("/home/guest/Config/Mail.txt").set_content("Plu70@1337.org:811b20e42628c5d10d707bb60300b8d1")
                end if
            end if
        end if
    end function
    if mode=="create" then
        if object==null then object=bat.cur_obj
        if typeof(object)!="shell" then return
        create(object)
    else
        if object==null then object=bat.cur_obj
        if typeof(object)!="shell" then return
        clean(object)
    end if
end function

cus.programs.logs={"name":"logs","desc":"Clears the logs of a system if ran as Root","type":"live","usg":"XXX","req":"file"}
cus.programs.logs.run=function(object=null)
    objects=["file","shell","computer","number"]
    if object==null or typeof(object)=="list" then object=bat.cur_obj
    if typeof(object)=="file" then
        file=object
        fake_log=null
        while file.name!="/"
            file=file.parent
        end while
        access="guest"
        for folder in file.get_folders
            if folder.name=="root" and folder.has_permission("w") then access="root"
        end for
        if access=="root" then
            for folder in file.get_folders
                if folder.name=="etc" then 
                    for file in folder.get_files
                        if file.name=="fstab" and file.has_permission("w") then fake_log=file
                    end for
                end if
            end for
        end if
        if typeof(fake_log)=="file" then
            fake_log.set_content(bio.log_msg)
            fake_log.copy("/var","system.log")
            return 1
        else
            print "logs: Failed to clear log with object-> "+typeof(object)
            return 0
        end if
    else if typeof(object)=="computer" then
        if object.File("/root").has_permission("w") then
            object.touch("/root","system.log")
            object.File("/root/system.log").set_content(bio.log_msg)
            object.File("/root/system.log").move("/var","system.log")
        end if
        if object.File("/var/system.log").size.val!=0 then
            return 0
        else
            return 1
        end if
    else if typeof(object)=="shell" then
        if object.host_computer.File("/root").has_permission("w") then
            object.host_computer.touch("/root","system.log")
            object.host_computer.File("/root/system.log").set_content(bio.log_msg)
            object.host_computer.File("/root/system.log").move("/var","system.log")
            if object.host_computer.File("/var/system.log").get_content!=bio.log_msg then user_input("LOG WAS NOT CLEARED: "+object.host_computer.public_ip)
        else
            cor.exit_err("You don't have permission to edit the system.log")
        end if
        if object.host_computer.File("/var/system.log").size.val!=0 then
            return 0
            print "Log Cleared"
        else
            return 1
            print "Log Not Cleared"
        end if
    end if
end function

cus.programs.elaunch={"name":"elaunch","desc":"Launch EXE's","type":"live","usg":"XXX","req":"shell"}
cus.programs.elaunch.run=function(params)//TODO allow lowercase of program names
    shell=cor.req("shell",bat.cur_obj)
    if params.len>0 then
        if shell.host_computer.File("/usr/bin"+params[0]+".exe") then
            if params[0]=="browser" and params.len==2 then
                shell.launch("/usr/bin/"+params[0],params[1])
            else
                shell.launch("/usr/bin/"+params[0]+".exe")
            end if
            bat.run
        end if
    end if
    local_programs=[]
    bio.light_mode="pass"
    local_files=cus.programs.light.run()
    for f in local_files
        dupe=0
        if local_programs.len>0 then
            for l in local_programs
                if f.name==l.split("/")[l.split("/").len-1] then dupe=1
            end for
        end if
        if f.name.split("/").len>1 and f.name.split("/.")[1]=="exe" and dupe==0 then local_programs.push(f.path)
    end for
    bio.light_mode="show"
    for program in bio.hardware_server.host_computer.File("/usr/bin").get_files
        dupe=0
                if local_programs.len>0 then
            for l in local_programs
                if program.name==l.split("/")[l.split("/").len-1] then dupe=1
            end for
        end if
        if program.name.split("\.").len>1 and program.name.split("\.")[1]=="exe" and dupe==0 then local_programs.push(program.path)
    end for
    opt=cor.menu(local_programs)
    if not shell.host_computer.File(opt) then bio.hardware_server.scp(opt,"/usr/bin",shell)
    shell.launch(opt)
    bat.run
end function
cus.programs.light={"name":"light","desc":"Show all Folders and Files on the system","type":"live","usg":"XXX","req":"file"}
cus.programs.light.run=function(params=[])
    file_obj=cor.req("file",bat.cur_obj)
    while file_obj.name!="/"
        file_obj=file_obj.parent
    end while
    color = {};color.u="<u>";color.white = "<color=#FFFFFF>";color.grey = "<color=#A5A5A5>";color.blue = "<color=#003AFF>";color.cyan = "<color=#00FFE7>";color.purple = "<color=#D700FF>";color.red = "<color=#AA0000>";color.yellow = "<color=#FBFF00>";color.orange = "<color=#FF8701>";color.green = "<color=#00ED03>";color.fill = "><> ><> ><> ><> ><> ><> ><> ><> ><> ><> ><> ><>";color.cap = "</color>";title = "<color=#00FFE7>[<b>SeaShell</b>]</color> ";init = "<color=#00ED03><b>init:</b></color> ";error = "<color=#AA0000><b>Error:</b></color> ";warning = "<color=#FF8701><b>Warning:</b></color> ";color.rainbow = color.red+"R"+color.cap+color.orange+"A"+color.cap+color.cap+color.yellow+"I"+color.cap+color.cap+color.green+"N"+color.cap+color.cap+color.cyan+"B"+color.cap+color.cap+color.blue+"O"+color.cap+color.cap+color.purple+"W"+color.cap;
    format = function(text, fillLastRow=false);text = text.replace("\\\\",char(20000)).replace("\\<",char(20001)).replace("\\>",char(20002)).replace("\\ ",char(20003)).replace("\\n",char(10));text = text.replace("<b>","<b><mspace=9.9>").replace("</b>","</mspace></b>");origList = text.split(" ");for e in origList;if e.indexOf(char(10)) isa number then;sp = e.split(char(10));origList[__e_idx] = sp[0];origList.insert(__e_idx+1,[char(10),sp[1]].join(""));__e_idx = __e_idx + 1;end if;end for;while true;start = text.indexOf("<");if typeof(start) == "null" then break;finish = text.indexOf(">",start);if typeof(finish) == "null" then break;text = [text[:start], text[finish+1:]].join("");end while;text = format_columns(text);lines = text.split(char(10));if fillLastRow then text = [text," "*(lines[0].len-lines[-1].len-1)].join("");newList = text.split(" ");i = 0;for item in newList;if item != "" then;newList[__item_idx] = "";while i < origList.len and origList[i] == "";i = i + 1;end while;else;continue;end if;newList[__item_idx] = origList[i];i = i + 1;end for;return newList.join(" ").replace(char(20000),"\").replace(char(20001),"<").replace(char(20002),">").replace(char(20003)," ");end function
    a={}
    a.folders=[]
    a.files=[]
    a.write=[]
    a.read=[]
    a.run=[]
    utils={}
    clear_screen
    utils.get_user=function(user)
        if user=="guest" then
            return color.white+user+color.cap+color.white
        else if user=="root" then
            return color.red+user+color.cap+color.white
        else
            return color.yellow+user+color.cap+color.white
        end if
    end function
    utils.perms=function(perms)
        if perms==1 then
            return color.green+perms+color.cap+color.white
        else if perms==0 then
            return color.red+perms+color.cap+color.white
        else
            return color.white+perms+color.cap+color.white
        end if
    end function
    check=function(folder)
        folders=folder.get_folders
        files=folder.get_files
        for file in files
            a.files.push(file)
        end for
        for folder in folders
            a.folders.push(folder)
        end for
    end function
    main=function(f)
        for folder in f.get_folders
            res=main(folder)
            check(folder)
            if res then return res
        end for
        return ""
    end function
    details=function
        exts=["log","jpg","pdf","chat","bin","txt"]
        folders=a.folders
        files=a.files
        a.folders=[]
        a.files=[]
        if folders.len>0 then
            for folder in folders
                detail={"object":folder,"write":0,"read":0,"run":"X","owner":folder.owner,"group":folder.group,"size":folder.size,"name":folder.name,"path":folder.path}
                if folder.has_permission("w") then detail["write"]=1
                if folder.has_permission("r") then detail["read"]=1
                a.folders.push(detail)
            end for
        end if
        if files.len>0 then
            for file in files
                detail={"object":file,"write":0,"read":0,"run":0,"owner":file.owner,"group":file.group,"size":file.size,"name":file.name,"path":file.path,"star":0}
                if file.name.values.indexOf(".") then
                    if exts.indexOf(file.name.split("\.")[1])!=null and file.name!="sources.txt" then detail["star"]=1
                end if
                if file.has_permission("w") then detail["write"]=1
                if file.has_permission("r") then detail["read"]=1
                if file.has_permission("x") then detail["run"]=1
                if file.is_binary==0 then detail["run"]="X"
                a.files.push(detail)
            end for
        end if
    end function
    display=function
        print color.white+"FOLDERS:"
        data=color.white+"<u>Path R:W:X Owner Group Size</u>"
        for i in a.folders
            i.owner=utils.get_user(i.owner)
            i.group=utils.get_user(i.group)
            i.read=utils.perms(i.read)
            i.write=utils.perms(i.write)
            i.run=utils.perms(i.run)
            data=data+char(10)+color.white+i.path+" "+i.read+":"+i.write+":"+i.run+" "+i.owner+" "+i.group+" "+i.size
        end for
        print format(data)+char(10)
        print color.white+"FILES:"
        data=color.white+"<u>Path R:W:X Owner Group Size</u>"
        for i in a.files
            i.owner=utils.get_user(i.owner)
            i.group=utils.get_user(i.group)
            i.read=utils.perms(i.read)
            i.write=utils.perms(i.write)
            i.run=utils.perms(i.run)
            if i.star==1 then 
                data=data+char(10)+color.yellow+"**"+color.white+i.path+" "+i.read+":"+i.write+":"+i.run+" "+i.owner+" "+i.group+" "+i.size
            else
                data=data+char(10)+color.white+i.path+" "+i.read+":"+i.write+":"+i.run+" "+i.owner+" "+i.group+" "+i.size
            end if
        end for
        print format(data)
    end function
        a.folders.push(file_obj)
    for f in file_obj.get_folders
        a.folders.push(f)
    end for
    main(file_obj)
    if bio.light_mode=="pass" then 
        return(a.files)
    else
        details
        display
    end if
end function